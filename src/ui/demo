<!DOCTYPE html>
<html>
<head>
    <title>Arbitrage Engine Dashboard</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body { 
            font-family: 'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', Arial, sans-serif; 
            margin: 0; 
            padding: 20px; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
            min-height: 100vh; 
            position: relative;
            overflow-x: hidden;
        }
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 40% 40%, rgba(120, 200, 255, 0.2) 0%, transparent 50%);
            z-index: -1;
            pointer-events: none;
        }
        .container { max-width: 1200px; margin: 0 auto; }
        .header { 
            text-align: center; 
            color: white; 
            margin-bottom: 40px; 
            position: relative;
        }
        .header::after {
            content: '';
            position: absolute;
            bottom: -20px;
            left: 50%;
            transform: translateX(-50%);
            width: 100px;
            height: 4px;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.8), transparent);
            border-radius: 2px;
        }
        .header h1 { 
            font-size: 2.8rem; 
            margin-bottom: 10px; 
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3); 
            font-weight: 700;
            letter-spacing: -0.5px;
        }
        .header p { 
            font-size: 1.3rem; 
            opacity: 0.9; 
            font-weight: 400;
            margin: 0;
        }
        .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
        .card { 
            background: rgba(255,255,255,0.98); 
            border-radius: 16px; 
            padding: 24px; 
            box-shadow: 
                0 8px 32px rgba(31, 38, 135, 0.37),
                0 4px 16px rgba(0, 0, 0, 0.1); 
            backdrop-filter: blur(4px); 
            border: 1px solid rgba(255,255,255,0.18); 
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        .card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #667eea, #764ba2, #667eea);
            background-size: 200% 100%;
            animation: shimmer 3s ease-in-out infinite;
        }
        @keyframes shimmer {
            0%, 100% { background-position: 200% 0; }
            50% { background-position: -200% 0; }
        }
        .card:hover { 
            transform: translateY(-4px); 
            box-shadow: 
                0 12px 40px rgba(31, 38, 135, 0.5),
                0 8px 24px rgba(0, 0, 0, 0.15); 
        }
        .card h3 { 
            margin-top: 0; 
            color: #2c3e50; 
            border-bottom: 3px solid transparent;
            background: linear-gradient(90deg, #667eea, #764ba2) 0 100% / 100% 3px no-repeat;
            padding-bottom: 12px; 
            font-size: 1.3rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        .status { padding: 8px 16px; border-radius: 6px; font-weight: bold; display: inline-block; }
        .status.running { background-color: #4CAF50; color: white; }
        .data-item { margin: 10px 0; padding: 10px; background: #f8f9fa; border-radius: 6px; }
        .price { font-size: 1.2rem; font-weight: bold; color: #2196F3; }
        .timestamp { font-size: 0.8rem; color: #666; }
        .loading { text-align: center; color: #666; font-style: italic; }
        .error { color: #f44336; background: #ffebee; padding: 10px; border-radius: 6px; }
        .refresh-indicator { 
            position: fixed; 
            top: 30px; 
            right: 30px; 
            background: linear-gradient(135deg, #4CAF50, #45a049); 
            color: white; 
            padding: 12px 20px; 
            border-radius: 25px; 
            font-size: 0.95rem; 
            font-weight: 600;
            box-shadow: 0 4px 20px rgba(76, 175, 80, 0.4);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
            animation: pulse 2s infinite;
            z-index: 1000;
        }
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }
        
        /* Responsive Design */
        @media (max-width: 768px) {
            body { padding: 10px; }
            .container { padding: 0 10px; }
            .header h1 { font-size: 2.2rem; }
            .header p { font-size: 1.1rem; }
            .grid { grid-template-columns: 1fr; gap: 15px; }
            .card { padding: 16px; }
            .exchange-tabs { gap: 8px; }
            .exchange-tab { padding: 10px 16px; min-width: 110px; font-size: 0.9rem; }
            .refresh-indicator { top: 15px; right: 15px; padding: 10px 16px; font-size: 0.85rem; }
            .arbitrage-controls { flex-direction: column; align-items: stretch; gap: 10px; }
            .arbitrage-filters { justify-content: center; }
            .view-toggle { align-self: center; }
            .arbitrage-table { font-size: 0.8rem; }
            .opportunities-table th, .opportunities-table td { padding: 8px 5px; }
            .action-buttons { flex-direction: column; gap: 4px; }
            .exchange-badge { display: block; margin: 2px 0; }
        }
        .exchange-navbar { background: rgba(255,255,255,0.15); backdrop-filter: blur(10px); border-radius: 16px; padding: 15px; margin-bottom: 30px; border: 1px solid rgba(255,255,255,0.2); }
        .exchange-navbar h3 { color: white; margin: 0 0 15px 0; text-align: center; font-size: 1.2rem; }
        .exchange-tabs { display: flex; justify-content: center; gap: 15px; flex-wrap: wrap; }
        .exchange-tab { 
            background: rgba(255,255,255,0.1); 
            color: white; 
            border: 2px solid rgba(255,255,255,0.3); 
            padding: 12px 24px; 
            border-radius: 12px; 
            cursor: pointer; 
            transition: all 0.3s ease; 
            font-weight: 600; 
            font-size: 1rem;
            display: flex;
            align-items: center;
            gap: 8px;
            min-width: 140px;
            justify-content: center;
        }
        .exchange-tab:hover { 
            background: rgba(255,255,255,0.2); 
            transform: translateY(-2px); 
            box-shadow: 0 8px 25px rgba(0,0,0,0.2); 
        }
        .exchange-tab.active { 
            background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%); 
            border-color: #4CAF50; 
            box-shadow: 0 8px 25px rgba(76, 175, 80, 0.4); 
            transform: translateY(-2px);
        }
        .exchange-tab .icon { font-size: 1.3rem; }
        .exchange-tab .label { font-size: 0.95rem; }
        .chart-container { position: relative; height: 300px; margin: 20px 0; }
        .trading-pair-tabs { display: flex; gap: 10px; margin: 15px 0; flex-wrap: wrap; }
        .tab-button { padding: 8px 16px; border: none; border-radius: 6px; background: #f0f0f0; cursor: pointer; transition: all 0.3s; }
        .tab-button.active { background: #667eea; color: white; }
        .tab-button:hover { background: #555; color: white; }
        .metric-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; margin: 20px 0; }
        .metric-card { background: #f8f9fa; padding: 15px; border-radius: 8px; text-align: center; }
        .metric-value { font-size: 1.5rem; font-weight: bold; color: #2196F3; }
        .metric-label { font-size: 0.9rem; color: #666; margin-top: 5px; }
        .alert-section { background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%); padding: 15px; border-radius: 8px; margin: 15px 0; }
        .order-book-table { background: #f8f9fa; border-radius: 8px; padding: 15px; max-height: 300px; overflow-y: auto; }
        .order-book-table h4 { margin-top: 0; color: #333; }
        .order-book-item { display: flex; justify-content: space-between; padding: 3px 0; font-family: monospace; font-size: 0.9rem; }
        .bid-price { color: #4CAF50; font-weight: bold; }
        .ask-price { color: #f44336; font-weight: bold; }
        .connection-status-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; }
        .connection-item { display: flex; align-items: center; background: #f8f9fa; padding: 15px; border-radius: 8px; }
        .connection-indicator { font-size: 2rem; margin-right: 15px; }
        .connection-details { flex-grow: 1; }
        .connection-details strong { color: #333; }
        .connection-details span { color: #666; font-size: 0.9rem; }
        
        /* Arbitrage Opportunities Table Styles */
        .arbitrage-controls { 
            display: flex; 
            justify-content: space-between; 
            align-items: center; 
            margin-bottom: 20px; 
            flex-wrap: wrap; 
            gap: 15px; 
        }
        .arbitrage-filters { 
            display: flex; 
            gap: 10px; 
            align-items: center; 
            flex-wrap: wrap; 
        }
        .filter-group { 
            display: flex; 
            flex-direction: column; 
            gap: 5px; 
        }
        .filter-group label { 
            font-size: 0.85rem; 
            color: #666; 
            font-weight: 600; 
        }
        .filter-select { 
            padding: 8px 12px; 
            border: 1px solid #ddd; 
            border-radius: 6px; 
            background: white; 
            font-size: 0.9rem; 
            min-width: 120px; 
        }
        .view-toggle { 
            display: flex; 
            background: #f0f0f0; 
            border-radius: 8px; 
            padding: 4px; 
        }
        .view-toggle button { 
            padding: 8px 16px; 
            border: none; 
            background: transparent; 
            cursor: pointer; 
            border-radius: 6px; 
            font-size: 0.9rem; 
            transition: all 0.3s; 
        }
        .view-toggle button.active { 
            background: #667eea; 
            color: white; 
        }
        .arbitrage-table { 
            overflow-x: auto; 
            margin: 20px 0; 
        }
        .opportunities-table { 
            width: 100%; 
            border-collapse: collapse; 
            background: white; 
            border-radius: 8px; 
            overflow: hidden; 
            box-shadow: 0 2px 10px rgba(0,0,0,0.1); 
        }
        .opportunities-table th { 
            background: linear-gradient(135deg, #667eea, #764ba2); 
            color: white; 
            padding: 12px 15px; 
            text-align: left; 
            font-weight: 600; 
            font-size: 0.9rem; 
        }
        .opportunities-table td { 
            padding: 12px 15px; 
            border-bottom: 1px solid #eee; 
            font-size: 0.9rem; 
        }
        .opportunities-table tr:hover { 
            background: #f8f9fa; 
        }
        .profit-positive { 
            color: #4CAF50; 
            font-weight: bold; 
        }
        .profit-negative { 
            color: #f44336; 
            font-weight: bold; 
        }
        .risk-low { 
            background: #4CAF50; 
            color: white; 
            padding: 4px 8px; 
            border-radius: 4px; 
            font-size: 0.8rem; 
        }
        .risk-medium { 
            background: #FF9800; 
            color: white; 
            padding: 4px 8px; 
            border-radius: 4px; 
            font-size: 0.8rem; 
        }
        .risk-high { 
            background: #f44336; 
            color: white; 
            padding: 4px 8px; 
            border-radius: 4px; 
            font-size: 0.8rem; 
        }
        .exchange-badge { 
            display: inline-block; 
            padding: 4px 8px; 
            border-radius: 4px; 
            font-size: 0.8rem; 
            font-weight: 600; 
            margin: 2px; 
        }
        .exchange-binance { 
            background: #F0B90B; 
            color: white; 
        }
        .exchange-okx { 
            background: #0066FF; 
            color: white; 
        }
        .exchange-bybit { 
            background: #FF6B35; 
            color: white; 
        }
        .action-buttons { 
            display: flex; 
            gap: 8px; 
        }
        .action-btn { 
            padding: 6px 12px; 
            border: none; 
            border-radius: 4px; 
            cursor: pointer; 
            font-size: 0.8rem; 
            font-weight: 600; 
            transition: all 0.3s; 
        }
        .action-btn.execute { 
            background: #4CAF50; 
            color: white; 
        }
        .action-btn.execute:hover { 
            background: #45a049; 
        }
        .action-btn.details { 
            background: #2196F3; 
            color: white; 
        }
        .action-btn.details:hover { 
            background: #0b7dda; 
        }
        .opportunity-details { 
            background: #f8f9fa; 
            padding: 15px; 
            border-radius: 8px; 
            margin: 10px 0; 
            display: none; 
        }
        .opportunity-details.show { 
            display: block; 
        }
        .details-grid { 
            display: grid; 
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); 
            gap: 15px; 
        }
        .detail-item { 
            background: white; 
            padding: 10px; 
            border-radius: 6px; 
            border-left: 4px solid #667eea; 
        }
        .detail-label { 
            font-size: 0.8rem; 
            color: #666; 
            margin-bottom: 5px; 
        }
        .detail-value { 
            font-size: 1rem; 
            font-weight: 600; 
            color: #333; 
        }
        
        /* Responsive Table */
        @media (max-width: 768px) {
            .arbitrage-table {
                font-size: 0.8rem;
            }
            .opportunities-table th,
            .opportunities-table td {
                padding: 8px 5px;
            }
            .action-buttons {
                flex-direction: column;
                gap: 4px;
            }
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🚀 Synthetic Arbitrage Detection Engine</h1>
            <p>Phase 9 Implementation - Real-time Dashboard</p>
        </div>
        
        <div class="exchange-navbar">
            <h3>📈 Select Exchange</h3>
            <div class="exchange-tabs">
                <div class="exchange-tab active" data-exchange="all" onclick="onExchangeChange('all')">
                    <span class="icon">🌐</span>
                    <span class="label">All Exchanges</span>
                </div>
                <div class="exchange-tab" data-exchange="binance" onclick="onExchangeChange('binance')">
                    <span class="icon">🟡</span>
                    <span class="label">Binance</span>
                </div>
                <div class="exchange-tab" data-exchange="okx" onclick="onExchangeChange('okx')">
                    <span class="icon">🔵</span>
                    <span class="label">OKX</span>
                </div>
                <div class="exchange-tab" data-exchange="bybit" onclick="onExchangeChange('bybit')">
                    <span class="icon">🟠</span>
                    <span class="label">Bybit</span>
                </div>
            </div>
        </div>
        
        <div class="refresh-indicator" id="refreshIndicator" style="display: none;">🔄 Updating...</div>
        
        <div class="grid">
            <div class="card">
                <h3>📊 System Status</h3>
                <div id="systemStatus" class="loading">Loading...</div>
            </div>
            
            <div class="card">
                <h3 id="marketDataTitle">💹 Market Data</h3>
                <div id="marketData" class="loading">Loading market data...</div>
            </div>
            
            <div class="card">
                <h3 id="pricingResultsTitle">⚡ Pricing Results</h3>
                <div id="pricingResults" class="loading">Loading pricing data...</div>
            </div>
            
            <div class="card">
                <h3>🎯 Arbitrage Opportunities</h3>
                <div class="arbitrage-controls">
                    <div class="arbitrage-filters">
                        <div class="filter-group">
                            <label>Min Profit %</label>
                            <select class="filter-select" id="minProfitFilter" onchange="filterOpportunities()">
                                <option value="0">All</option>
                                <option value="0.1">≥ 0.1%</option>
                                <option value="0.5">≥ 0.5%</option>
                                <option value="1.0">≥ 1.0%</option>
                                <option value="2.0">≥ 2.0%</option>
                            </select>
                        </div>
                        <div class="filter-group">
                            <label>Risk Level</label>
                            <select class="filter-select" id="riskFilter" onchange="filterOpportunities()">
                                <option value="all">All</option>
                                <option value="low">Low Risk</option>
                                <option value="medium">Medium Risk</option>
                                <option value="high">High Risk</option>
                            </select>
                        </div>
                        <div class="filter-group">
                            <label>Market Pair</label>
                            <select class="filter-select" id="pairFilter" onchange="filterOpportunities()">
                                <option value="all">All Pairs</option>
                                <option value="BTCUSDT">BTC/USDT</option>
                                <option value="ETHUSDT">ETH/USDT</option>
                                <option value="ADAUSDT">ADA/USDT</option>
                                <option value="BNBUSDT">BNB/USDT</option>
                                <option value="SOLUSDT">SOL/USDT</option>
                            </select>
                        </div>
                    </div>
                    <div class="view-toggle">
                        <button class="active" id="tableViewBtn" onclick="switchView('table')">📊 Table</button>
                        <button id="cardViewBtn" onclick="switchView('card')">📋 Cards</button>
                    </div>
                </div>
                
                <div id="opportunitiesTableView" class="arbitrage-table">
                    <table class="opportunities-table">
                        <thead>
                            <tr>
                                <th>Market Pair</th>
                                <th>From Exchange</th>
                                <th>To Exchange</th>
                                <th>Buy Price</th>
                                <th>Sell Price</th>
                                <th>Expected Profit</th>
                                <th>Volume (USDT)</th>
                                <th>Risk Score</th>
                                <th>Execution Time</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="opportunitiesTableBody">
                            <tr>
                                <td colspan="10" class="loading" style="text-align: center; padding: 40px;">
                                    🔍 Scanning for arbitrage opportunities...
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                
                <div id="opportunitiesCardView" class="loading" style="display: none;">
                    Scanning for opportunities...
                </div>
            </div>
            
            <div class="card">
                <h3>📈 Performance Metrics</h3>
                <div id="performance" class="loading">Loading performance data...</div>
            </div>
            
            <div class="card">
                <h3>⚠️ Risk Metrics</h3>
                <div id="riskMetrics" class="loading">Loading risk data...</div>
            </div>
            
            <!-- Phase 7 Performance Metrics Cards -->
            <div class="card">
                <h3>⚡ System Performance</h3>
                <div class="metric-grid">
                    <div class="metric-card">
                        <div class="metric-value" id="phase7CpuUsage">0%</div>
                        <div class="metric-label">CPU Usage</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value" id="phase7MemoryUsage">0%</div>
                        <div class="metric-label">Memory Usage</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value" id="phase7Throughput">0/s</div>
                        <div class="metric-label">Throughput</div>
                    </div>
                </div>
            </div>
            
            <div class="card">
                <h3>🕒 Latency Tracking</h3>
                <div class="metric-grid">
                    <div class="metric-card">
                        <div class="metric-value" id="phase7P50Latency">0ms</div>
                        <div class="metric-label">P50 Latency</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value" id="phase7P95Latency">0ms</div>
                        <div class="metric-label">P95 Latency</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value" id="phase7P99Latency">0ms</div>
                        <div class="metric-label">P99 Latency</div>
                    </div>
                </div>
            </div>
            
            <div class="card">
                <h3>🎯 System Health</h3>
                <div id="phase7HealthStatus" class="loading">Loading health status...</div>
                <div class="metric-grid" style="margin-top: 15px;">
                    <div class="metric-card">
                        <div class="metric-value" id="phase7HealthScore">0</div>
                        <div class="metric-label">Health Score</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value" id="phase7ActiveAlerts">0</div>
                        <div class="metric-label">Active Alerts</div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Enhanced Visualizations Section -->
        <div class="card" style="margin-top: 20px;">
            <h3>📈 Live Price Charts</h3>
            <div class="trading-pair-tabs">
                <button class="tab-button active" onclick="showChart('BTCUSDT')">₿ BTC/USDT</button>
                <button class="tab-button" onclick="showChart('ETHUSDT')">⟨⟩ ETH/USDT</button>
                <button class="tab-button" onclick="showChart('ADAUSDT')">♠ ADA/USDT</button>
                <button class="tab-button" onclick="showChart('BNBUSDT')">🔶 BNB/USDT</button>
                <button class="tab-button" onclick="showChart('SOLUSDT')">🌞 SOL/USDT</button>
            </div>
            <div class="chart-container">
                <canvas id="priceChart"></canvas>
            </div>
        </div>
        
        <div class="grid" style="margin-top: 20px;">
            <div class="card">
                <h3>📊 Exchange Volume Distribution</h3>
                <div class="chart-container">
                    <canvas id="volumeChart"></canvas>
                </div>
            </div>
            
            <div class="card">
                <h3>⚡ Arbitrage Opportunities Timeline</h3>
                <div class="chart-container">
                    <canvas id="arbitrageChart"></canvas>
                </div>
            </div>
        </div>
        
        <!-- Order Book Depth Visualization -->
        <div class="card" style="margin-top: 20px;">
            <h3>📖 Order Book Depth Analysis</h3>
            <div class="trading-pair-tabs">
                <button class="tab-button active" onclick="showOrderBook('BTCUSDT')">₿ BTC/USDT</button>
                <button class="tab-button" onclick="showOrderBook('ETHUSDT')">⟨⟩ ETH/USDT</button>
                <button class="tab-button" onclick="showOrderBook('ADAUSDT')">♠ ADA/USDT</button>
            </div>
            <div class="grid" style="margin-top: 15px;">
                <div class="chart-container">
                    <canvas id="orderBookChart"></canvas>
                </div>
                <div class="order-book-table">
                    <h4>Live Order Book</h4>
                    <div id="orderBookData" class="loading">Loading order book...</div>
                </div>
            </div>
        </div>
        
        <!-- Advanced Risk Dashboard -->
        <div class="card" style="margin-top: 20px;">
            <h3>🎯 Advanced Risk Analytics</h3>
            <div class="metric-grid">
                <div class="metric-card">
                    <div class="metric-value" id="portfolioVar">$2,500</div>
                    <div class="metric-label">Portfolio VaR (95%)</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="expectedShortfall">$3,000</div>
                    <div class="metric-label">Expected Shortfall</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="concentrationRisk">25%</div>
                    <div class="metric-label">Concentration Risk</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="correlationRisk">35%</div>
                    <div class="metric-label">Correlation Risk</div>
                </div>
            </div>
            <div class="chart-container">
                <canvas id="riskHeatmapChart"></canvas>
            </div>
        </div>
        
        <!-- Portfolio Performance Dashboard -->
        <div class="card" style="margin-top: 20px;">
            <h3>💰 Portfolio Performance Tracking</h3>
            <div class="metric-grid">
                <div class="metric-card">
                    <div class="metric-value" id="totalPnL">+$12,450</div>
                    <div class="metric-label">Total P&L</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="realizedPnL">+$8,230</div>
                    <div class="metric-label">Realized P&L</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="unrealizedPnL">+$4,220</div>
                    <div class="metric-label">Unrealized P&L</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="sharpeRatio">1.85</div>
                    <div class="metric-label">Sharpe Ratio</div>
                </div>
            </div>
            <div class="chart-container">
                <canvas id="pnlChart"></canvas>
            </div>
        </div>
        
        <!-- WebSocket Connection Status -->
        <div class="card" style="margin-top: 20px;">
            <h3>🌐 Exchange Connection Status</h3>
            <div class="connection-status-grid">
                <div class="connection-item">
                    <div class="connection-indicator" id="binanceStatus">🟡</div>
                    <div class="connection-details">
                        <strong>Binance</strong><br>
                        <span id="binanceLatency">45ms</span> | <span id="binanceMessages">1,234</span> msgs
                    </div>
                </div>
                <div class="connection-item">
                    <div class="connection-indicator" id="okxStatus">🔵</div>
                    <div class="connection-details">
                        <strong>OKX</strong><br>
                        <span id="okxLatency">52ms</span> | <span id="okxMessages">987</span> msgs
                    </div>
                </div>
                <div class="connection-item">
                    <div class="connection-indicator" id="bybitStatus">🟠</div>
                    <div class="connection-details">
                        <strong>Bybit</strong><br>
                        <span id="bybitLatency">38ms</span> | <span id="bybitMessages">756</span> msgs
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Real-time Alerts Section -->
        <div class="alert-section" style="margin-top: 20px;">
            <h3>🚨 Real-Time Alerts</h3>
            <div id="alertContainer">
                <p>🔍 Monitoring for arbitrage opportunities and risk alerts...</p>
            </div>
        </div>
        <div class="card" style="margin-top: 20px; text-align: center; color: #666;">
            <p>🔗 API Endpoints: 
                <a href="/api/status">Status</a> | 
                <a href="/api/market-data">Market Data</a> | 
                <a href="/api/pricing-results">Pricing</a> | 
                <a href="/api/opportunities">Opportunities</a>
            </p>
            <p>⚡ Phase 7 API: 
                <a href="/api/performance/system-metrics">System</a> | 
                <a href="/api/performance/latency-metrics">Latency</a> | 
                <a href="/api/performance/health-status">Health</a> | 
                <a href="/api/performance/bottlenecks">Bottlenecks</a>
            </p>
            <p>Last Updated: <span id="lastUpdate">-</span></p>
        </div>
    </div>
    
    <script>
        // Dashboard JavaScript for real-time updates
        let isUpdating = false;
        let selectedExchange = 'all';
        
        function onExchangeChange(exchange) {
            // Remove active class from all tabs
            document.querySelectorAll('.exchange-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Add active class to selected tab
            document.querySelector(`[data-exchange="${exchange}"]`).classList.add('active');
            
            selectedExchange = exchange;
            console.log('Exchange changed to:', selectedExchange);
            
            // Update titles based on selected exchange
            const exchangeText = selectedExchange === 'all' ? 'All Exchanges' : selectedExchange.toUpperCase();
            const exchangeIcon = selectedExchange === 'binance' ? '🟡' : 
                               selectedExchange === 'okx' ? '🔵' : 
                               selectedExchange === 'bybit' ? '🟠' : '🌐';
            
            document.getElementById('marketDataTitle').textContent = `💹 Market Data - ${exchangeIcon} ${exchangeText}`;
            document.getElementById('pricingResultsTitle').textContent = `⚡ Pricing Results - ${exchangeIcon} ${exchangeText}`;
            
            // Immediately update all data with new filter
            updateAllData();
        }
        
        async function fetchJson(url) {
            try {
                const response = await fetch(url);
                if (!response.ok) throw new Error(`HTTP ${response.status}`);
                return await response.json();
            } catch (error) {
                console.error(`Error fetching ${url}:`, error);
                return null;
            }
        }
        
        function formatTimestamp(timestamp) {
            return new Date(timestamp).toLocaleTimeString();
        }
        
        function showError(elementId, message) {
            document.getElementById(elementId).innerHTML = `<div class="error">${message}</div>`;
        }
        
        async function updateSystemStatus() {
            const data = await fetchJson('/api/status');
            const element = document.getElementById('systemStatus');
            
            if (data) {
                element.innerHTML = `
                    <div class="status ${data.status}">${data.status.toUpperCase()}</div>
                    <div class="data-item">
                        <strong>Version:</strong> ${data.version}<br>
                        <strong>Uptime:</strong> ${data.uptime}s<br>
                        <strong>Components:</strong><br>
                        • Pricing Engine: ${data.components.pricing_engine}<br>
                        • Market Data: ${data.components.market_data}<br>
                        • Arbitrage Detector: ${data.components.arbitrage_detector}
                    </div>
                `;
            } else {
                showError('systemStatus', 'Failed to load system status');
            }
        }
        
        async function updateMarketData() {
            const url = selectedExchange === 'all' ? '/api/market-data' : `/api/market-data?exchange=${selectedExchange}`;
            const response = await fetchJson(url);
            const element = document.getElementById('marketData');
            
            if (response && response.data && Array.isArray(response.data)) {
                const data = response.data;
                const metadata = response.metadata || {};
                
                if (data.length === 0) {
                    const exchangeText = selectedExchange === 'all' ? 'any exchange' : selectedExchange.toUpperCase();
                    element.innerHTML = `<div class="data-item">
                        <p>No market data available for ${exchangeText}</p>
                        <div class="timestamp">Last checked: ${new Date().toLocaleTimeString()}</div>
                        <div style="font-size: 0.8rem; color: #666;">Filter: ${metadata.exchange_filter || 'all'}</div>
                    </div>`;
                    return;
                }
                
                let html = '';
                data.forEach(item => {
                    const exchangeIcon = item.exchange === 'binance' ? '🟡' : 
                                        item.exchange === 'okx' ? '🔵' : 
                                        item.exchange === 'bybit' ? '🟠' : '⚪';
                    html += `
                        <div class="data-item">
                            <strong>${item.symbol}</strong> ${exchangeIcon} (${item.exchange.toUpperCase()})<br>
                            <div class="price">Bid: $${parseFloat(item.bid).toFixed(2)} | Ask: $${parseFloat(item.ask).toFixed(2)}</div>
                            <div>Last: $${parseFloat(item.last).toFixed(2)} | Volume: ${parseFloat(item.volume).toFixed(2)}</div>
                            <div class="timestamp">${formatTimestamp(item.timestamp)}</div>
                        </div>
                    `;
                });
                
                // Add metadata footer
                html += `<div style="margin-top: 15px; padding: 10px; background: #f0f0f0; border-radius: 6px; font-size: 0.8rem; color: #666;">
                    📊 Showing ${metadata.total_points || data.length} data points | 
                    Filter: ${metadata.exchange_filter || 'all'} | 
                    Last update: ${metadata.last_update ? formatTimestamp(metadata.last_update) : 'Unknown'}
                </div>`;
                
                element.innerHTML = html;
            } else if (response && Array.isArray(response)) {
                // Fallback for old API response format
                const data = response;
                let html = '';
                data.forEach(item => {
                    const exchangeIcon = item.exchange === 'binance' ? '🟡' : 
                                        item.exchange === 'okx' ? '🔵' : 
                                        item.exchange === 'bybit' ? '🟠' : '⚪';
                    html += `
                        <div class="data-item">
                            <strong>${item.symbol}</strong> ${exchangeIcon} (${item.exchange.toUpperCase()})<br>
                            <div class="price">Bid: $${parseFloat(item.bid).toFixed(2)} | Ask: $${parseFloat(item.ask).toFixed(2)}</div>
                            <div>Last: $${parseFloat(item.last).toFixed(2)} | Volume: ${parseFloat(item.volume).toFixed(2)}</div>
                            <div class="timestamp">${formatTimestamp(item.timestamp)}</div>
                        </div>
                    `;
                });
                element.innerHTML = html;
            } else {
                showError('marketData', 'Failed to load market data - Invalid response format');
            }
        }
        
        async function updatePricingResults() {
            const url = selectedExchange === 'all' ? '/api/pricing-results' : `/api/pricing-results?exchange=${selectedExchange}`;
            const response = await fetchJson(url);
            const element = document.getElementById('pricingResults');
            
            if (response && response.data && Array.isArray(response.data)) {
                const data = response.data;
                const metadata = response.metadata || {};
                
                if (data.length === 0) {
                    const exchangeText = selectedExchange === 'all' ? 'any exchange' : selectedExchange.toUpperCase();
                    element.innerHTML = `<div class="data-item">
                        <p>No pricing results available for ${exchangeText}</p>
                        <div class="timestamp">Last checked: ${new Date().toLocaleTimeString()}</div>
                        <div style="font-size: 0.8rem; color: #666;">Filter: ${metadata.exchange_filter || 'all'}</div>
                    </div>`;
                    return;
                }
                
                let html = '';
                data.forEach(item => {
                    // Extract exchange from instrument_id (format: 'SYMBOL@exchange')
                    const parts = item.instrument_id.split('@');
                    const symbol = parts[0] || item.instrument_id;
                    const exchange = parts[1] || 'unknown';
                    const exchangeIcon = exchange === 'binance' ? '🟡' : 
                                        exchange === 'okx' ? '🔵' : 
                                        exchange === 'bybit' ? '🟠' : '⚪';
                    html += `
                        <div class="data-item">
                            <strong>${symbol}</strong> ${exchangeIcon} (${exchange.toUpperCase()})<br>
                            <div class="price">Synthetic Price: $${parseFloat(item.synthetic_price).toFixed(2)}</div>
                            <div>Model: ${item.model_name} | Confidence: ${(item.confidence * 100).toFixed(1)}%</div>
                            <div>Calc Time: ${parseFloat(item.calculation_time_ms).toFixed(2)}ms</div>
                            <div class="timestamp">${formatTimestamp(item.timestamp)}</div>
                        </div>
                    `;
                });
                
                // Add metadata footer
                html += `<div style="margin-top: 15px; padding: 10px; background: #f0f0f0; border-radius: 6px; font-size: 0.8rem; color: #666;">
                    🔮 Showing ${metadata.total_results || data.length} pricing results | 
                    Filter: ${metadata.exchange_filter || 'all'} | 
                    Last update: ${metadata.last_update ? formatTimestamp(metadata.last_update) : 'Unknown'}
                </div>`;
                
                element.innerHTML = html;
            } else if (response && Array.isArray(response)) {
                // Fallback for old API response format
                const data = response;
                let html = '';
                data.forEach(item => {
                    const parts = item.instrument_id.split('@');
                    const symbol = parts[0] || item.instrument_id;
                    const exchange = parts[1] || 'unknown';
                    const exchangeIcon = exchange === 'binance' ? '🟡' : 
                                        exchange === 'okx' ? '🔵' : 
                                        exchange === 'bybit' ? '🟠' : '⚪';
                    html += `
                        <div class="data-item">
                            <strong>${symbol}</strong> ${exchangeIcon} (${exchange.toUpperCase()})<br>
                            <div class="price">Synthetic Price: $${parseFloat(item.synthetic_price).toFixed(2)}</div>
                            <div>Model: ${item.model_name} | Confidence: ${(item.confidence * 100).toFixed(1)}%</div>
                            <div>Calc Time: ${parseFloat(item.calculation_time_ms).toFixed(2)}ms</div>
                            <div class="timestamp">${formatTimestamp(item.timestamp)}</div>
                        </div>
                    `;
                });
                element.innerHTML = html;
            } else {
                showError('pricingResults', 'Failed to load pricing results - Invalid response format');
            }
        }
        
        async function updateOpportunities() {
            try {
                // Try to fetch real opportunities first
                const data = await fetchJson('/api/opportunities');
                
                let opportunities = [];
                
                if (data && Array.isArray(data) && data.length > 0) {
                    // Use real API data if available
                    opportunities = data.map(item => ({
                        pair: item.instrument || item.symbol || 'UNKNOWN',
                        fromExchange: item.from_exchange || item.source_exchange || 'binance',
                        toExchange: item.to_exchange || item.target_exchange || 'okx',
                        buyPrice: parseFloat(item.buy_price || item.bid || Math.random() * 50000),
                        sellPrice: parseFloat(item.sell_price || item.ask || Math.random() * 50000),
                        expectedProfit: parseFloat(item.expected_return || item.profit_percentage || (Math.random() * 2)),
                        volume: parseFloat(item.volume || (Math.random() * 100000)),
                        riskScore: parseFloat(item.risk_score || (Math.random() * 100)),
                        executionTime: parseFloat(item.execution_time_ms || item.latency || (Math.random() * 500)),
                        timestamp: item.timestamp || Date.now(),
                        id: item.id || Math.random().toString(36).substr(2, 9)
                    }));
                } else {
                    // Generate realistic demo data based on current market data
                    opportunities = generateDemoOpportunities();
                }
                
                // Store opportunities for filtering
                window.allOpportunities = opportunities;
                
                // Apply current filters
                filterOpportunities();
                
            } catch (error) {
                console.error('Failed to update opportunities:', error);
                showOpportunitiesError('Failed to load arbitrage opportunities');
            }
        }
        
        function generateDemoOpportunities() {
            const pairs = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'BNBUSDT', 'SOLUSDT', 'DOTUSDT', 'LINKUSDT'];
            const exchanges = ['binance', 'okx', 'bybit'];
            const basePrices = {
                'BTCUSDT': 43000 + (Math.random() * 4000),
                'ETHUSDT': 2500 + (Math.random() * 400),
                'ADAUSDT': 0.4 + (Math.random() * 0.2),
                'BNBUSDT': 300 + (Math.random() * 50),
                'SOLUSDT': 60 + (Math.random() * 20),
                'DOTUSDT': 6 + (Math.random() * 2),
                'LINKUSDT': 15 + (Math.random() * 5)
            };
            
            const opportunities = [];
            
            // Generate 8-15 opportunities
            const numOpportunities = 8 + Math.floor(Math.random() * 8);
            
            for (let i = 0; i < numOpportunities; i++) {
                const pair = pairs[Math.floor(Math.random() * pairs.length)];
                const fromExchange = exchanges[Math.floor(Math.random() * exchanges.length)];
                let toExchange = exchanges[Math.floor(Math.random() * exchanges.length)];
                while (toExchange === fromExchange) {
                    toExchange = exchanges[Math.floor(Math.random() * exchanges.length)];
                }
                
                const basePrice = basePrices[pair];
                const priceVariation = basePrice * (0.001 + Math.random() * 0.01); // 0.1% to 1% variation
                
                const buyPrice = basePrice - (priceVariation * 0.5);
                const sellPrice = basePrice + (priceVariation * 0.5);
                const expectedProfit = ((sellPrice - buyPrice) / buyPrice) * 100;
                
                const volume = 10000 + (Math.random() * 90000);
                const riskScore = Math.random() * 100;
                const executionTime = 50 + (Math.random() * 450);
                
                opportunities.push({
                    pair: pair,
                    fromExchange: fromExchange,
                    toExchange: toExchange,
                    buyPrice: buyPrice,
                    sellPrice: sellPrice,
                    expectedProfit: expectedProfit,
                    volume: volume,
                    riskScore: riskScore,
                    executionTime: executionTime,
                    timestamp: Date.now() - (Math.random() * 300000), // Within last 5 minutes
                    id: Math.random().toString(36).substr(2, 9)
                });
            }
            
            // Sort by expected profit descending
            return opportunities.sort((a, b) => b.expectedProfit - a.expectedProfit);
        }
        
        function filterOpportunities() {
            if (!window.allOpportunities) return;
            
            const minProfit = parseFloat(document.getElementById('minProfitFilter').value) || 0;
            const riskLevel = document.getElementById('riskFilter').value;
            const pair = document.getElementById('pairFilter').value;
            
            let filtered = window.allOpportunities.filter(opp => {
                // Filter by minimum profit
                if (opp.expectedProfit < minProfit) return false;
                
                // Filter by risk level
                if (riskLevel !== 'all') {
                    const risk = opp.riskScore;
                    if (riskLevel === 'low' && risk > 40) return false;
                    if (riskLevel === 'medium' && (risk <= 40 || risk > 70)) return false;
                    if (riskLevel === 'high' && risk <= 70) return false;
                }
                
                // Filter by trading pair
                if (pair !== 'all' && opp.pair !== pair) return false;
                
                return true;
            });
            
            displayOpportunities(filtered);
        }
        
        function displayOpportunities(opportunities) {
            const currentView = document.getElementById('tableViewBtn').classList.contains('active') ? 'table' : 'card';
            
            if (currentView === 'table') {
                displayOpportunitiesTable(opportunities);
            } else {
                displayOpportunitiesCards(opportunities);
            }
        }
        
        function displayOpportunitiesTable(opportunities) {
            const tbody = document.getElementById('opportunitiesTableBody');
            
            if (opportunities.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="10" style="text-align: center; padding: 40px; color: #666;">
                            🔍 No opportunities found matching current filters
                        </td>
                    </tr>
                `;
                return;
            }
            
            let html = '';
            opportunities.forEach(opp => {
                const fromExchangeClass = `exchange-${opp.fromExchange}`;
                const toExchangeClass = `exchange-${opp.toExchange}`;
                const profitClass = opp.expectedProfit > 0 ? 'profit-positive' : 'profit-negative';
                
                let riskClass = 'risk-low';
                let riskText = 'Low';
                if (opp.riskScore > 70) {
                    riskClass = 'risk-high';
                    riskText = 'High';
                } else if (opp.riskScore > 40) {
                    riskClass = 'risk-medium';
                    riskText = 'Medium';
                }
                
                const fromIcon = opp.fromExchange === 'binance' ? '🟡' : 
                                 opp.fromExchange === 'okx' ? '🔵' : '🟠';
                const toIcon = opp.toExchange === 'binance' ? '🟡' : 
                               opp.toExchange === 'okx' ? '🔵' : '🟠';
                
                html += `
                    <tr>
                        <td><strong>${opp.pair}</strong></td>
                        <td>
                            <span class="exchange-badge ${fromExchangeClass}">
                                ${fromIcon} ${opp.fromExchange.toUpperCase()}
                            </span>
                        </td>
                        <td>
                            <span class="exchange-badge ${toExchangeClass}">
                                ${toIcon} ${opp.toExchange.toUpperCase()}
                            </span>
                        </td>
                        <td>$${opp.buyPrice.toFixed(4)}</td>
                        <td>$${opp.sellPrice.toFixed(4)}</td>
                        <td class="${profitClass}">+${opp.expectedProfit.toFixed(3)}%</td>
                        <td>$${opp.volume.toLocaleString(undefined, {maximumFractionDigits: 0})}</td>
                        <td>
                            <span class="${riskClass}">${riskText} (${opp.riskScore.toFixed(0)})</span>
                        </td>
                        <td>${opp.executionTime.toFixed(0)}ms</td>
                        <td>
                            <div class="action-buttons">
                                <button class="action-btn execute" onclick="executeOpportunity('${opp.id}')">
                                    Execute
                                </button>
                                <button class="action-btn details" onclick="showOpportunityDetails('${opp.id}')">
                                    Details
                                </button>
                            </div>
                        </td>
                    </tr>
                    <tr id="details-${opp.id}" class="opportunity-details">
                        <td colspan="10">
                            <div class="details-grid">
                                <div class="detail-item">
                                    <div class="detail-label">Price Spread</div>
                                    <div class="detail-value">$${(opp.sellPrice - opp.buyPrice).toFixed(4)}</div>
                                </div>
                                <div class="detail-item">
                                    <div class="detail-label">Potential Profit</div>
                                    <div class="detail-value">$${(opp.volume * opp.expectedProfit / 100).toFixed(2)}</div>
                                </div>
                                <div class="detail-item">
                                    <div class="detail-label">Market Impact</div>
                                    <div class="detail-value">${(Math.random() * 0.1).toFixed(3)}%</div>
                                </div>
                                <div class="detail-item">
                                    <div class="detail-label">Last Updated</div>
                                    <div class="detail-value">${formatTimestamp(opp.timestamp)}</div>
                                </div>
                                <div class="detail-item">
                                    <div class="detail-label">Confidence</div>
                                    <div class="detail-value">${(85 + Math.random() * 15).toFixed(1)}%</div>
                                </div>
                                <div class="detail-item">
                                    <div class="detail-label">Success Rate</div>
                                    <div class="detail-value">${(70 + Math.random() * 25).toFixed(1)}%</div>
                                </div>
                            </div>
                        </td>
                    </tr>
                `;
            });
            
            tbody.innerHTML = html;
        }
        
        function displayOpportunitiesCards(opportunities) {
            const cardView = document.getElementById('opportunitiesCardView');
            
            if (opportunities.length === 0) {
                cardView.innerHTML = '<p style="text-align: center; color: #666;">🔍 No opportunities found matching current filters</p>';
                return;
            }
            
            let html = '';
            opportunities.forEach(opp => {
                const profitClass = opp.expectedProfit > 0 ? 'profit-positive' : 'profit-negative';
                const fromIcon = opp.fromExchange === 'binance' ? '🟡' : 
                                 opp.fromExchange === 'okx' ? '🔵' : '🟠';
                const toIcon = opp.toExchange === 'binance' ? '🟡' : 
                               opp.toExchange === 'okx' ? '🔵' : '🟠';
                
                html += `
                    <div class="data-item">
                        <strong>${opp.pair}</strong><br>
                        <div>Route: ${fromIcon} ${opp.fromExchange.toUpperCase()} → ${toIcon} ${opp.toExchange.toUpperCase()}</div>
                        <div class="price ${profitClass}">Expected Return: +${opp.expectedProfit.toFixed(3)}%</div>
                        <div>Buy: $${opp.buyPrice.toFixed(4)} | Sell: $${opp.sellPrice.toFixed(4)}</div>
                        <div>Volume: $${opp.volume.toLocaleString()} | Risk: ${opp.riskScore.toFixed(0)}</div>
                        <div class="timestamp">${formatTimestamp(opp.timestamp)}</div>
                        <div style="margin-top: 10px;">
                            <button class="action-btn execute" onclick="executeOpportunity('${opp.id}')">Execute</button>
                            <button class="action-btn details" onclick="showOpportunityDetails('${opp.id}')">Details</button>
                        </div>
                    </div>
                `;
            });
            
            cardView.innerHTML = html;
        }
        
        function switchView(view) {
            const tableBtn = document.getElementById('tableViewBtn');
            const cardBtn = document.getElementById('cardViewBtn');
            const tableView = document.getElementById('opportunitiesTableView');
            const cardView = document.getElementById('opportunitiesCardView');
            
            if (view === 'table') {
                tableBtn.classList.add('active');
                cardBtn.classList.remove('active');
                tableView.style.display = 'block';
                cardView.style.display = 'none';
            } else {
                cardBtn.classList.add('active');
                tableBtn.classList.remove('active');
                tableView.style.display = 'none';
                cardView.style.display = 'block';
            }
            
            // Refresh display with current opportunities
            if (window.allOpportunities) {
                filterOpportunities();
            }
        }
        
        function executeOpportunity(id) {
            const opportunity = window.allOpportunities?.find(opp => opp.id === id);
            if (!opportunity) return;
            
            // Simulate execution
            addAlert('EXECUTION', `Executing arbitrage: ${opportunity.pair} ${opportunity.fromExchange.toUpperCase()}→${opportunity.toExchange.toUpperCase()} (+${opportunity.expectedProfit.toFixed(3)}%)`);
            
            // You could make an API call here to actually execute the trade
            // await fetchJson('/api/execute-arbitrage', { method: 'POST', body: JSON.stringify({ id }) });
        }
        
        function showOpportunityDetails(id) {
            const detailsRow = document.getElementById(`details-${id}`);
            if (detailsRow) {
                detailsRow.classList.toggle('show');
            }
        }
        
        function showOpportunitiesError(message) {
            const tbody = document.getElementById('opportunitiesTableBody');
            const cardView = document.getElementById('opportunitiesCardView');
            
            const errorMsg = `<div class="error">${message}</div>`;
            
            tbody.innerHTML = `
                <tr>
                    <td colspan="10" style="text-align: center; padding: 40px;">
                        ${errorMsg}
                    </td>
                </tr>
            `;
            cardView.innerHTML = errorMsg;
        }
        
        async function updatePerformance() {
            const data = await fetchJson('/api/performance');
            const element = document.getElementById('performance');
            
            if (data) {
                element.innerHTML = `
                    <div class="data-item">
                        <strong>Total Return:</strong> ${data.total_return}%<br>
                        <strong>Sharpe Ratio:</strong> ${data.sharpe_ratio}<br>
                        <strong>Max Drawdown:</strong> ${data.max_drawdown}%<br>
                        <strong>Win Rate:</strong> ${data.win_rate}%
                    </div>
                `;
            } else {
                showError('performance', 'Failed to load performance data');
            }
        }
        
        async function updateRiskMetrics() {
            const data = await fetchJson('/api/risk');
            const element = document.getElementById('riskMetrics');
            
            if (data) {
                element.innerHTML = `
                    <div class="data-item">
                        <strong>VaR (95%):</strong> ${data.var_95}%<br>
                        <strong>Expected Shortfall:</strong> ${data.expected_shortfall}%<br>
                        <strong>Portfolio Beta:</strong> ${data.portfolio_beta}<br>
                        <strong>Risk Score:</strong> ${data.risk_score}/100
                    </div>
                `;
            } else {
                showError('riskMetrics', 'Failed to load risk metrics');
            }
        }
        
        async function updatePhase7Data() {
            // Update Phase 7 performance metrics
            await updateSystemMetrics();
            await updateLatencyMetrics();
            await updateThroughputMetrics();
            await updateHealthStatus();
            await updateBottleneckAnalysis();
            await updatePerformanceTrends();
        }
        
        async function updateSystemMetrics() {
            const data = await fetchJson('/api/performance/system-metrics');
            if (data) {
                document.getElementById('phase7CpuUsage').textContent = `${data.cpu_usage_pct.toFixed(1)}%`;
                document.getElementById('phase7MemoryUsage').textContent = `${data.memory_usage_pct.toFixed(1)}%`;
                // Get system metrics don't have latency/throughput, get from other endpoints
            }
        }
        
        async function updateLatencyMetrics() {
            const data = await fetchJson('/api/performance/latency-metrics');
            if (data) {
                document.getElementById('phase7P50Latency').textContent = `${data.p50_latency_ms.toFixed(2)}ms`;
                document.getElementById('phase7P95Latency').textContent = `${data.p95_latency_ms.toFixed(2)}ms`;
                document.getElementById('phase7P99Latency').textContent = `${data.p99_latency_ms.toFixed(2)}ms`;
            }
        }
        
        async function updateThroughputMetrics() {
            const data = await fetchJson('/api/performance/throughput-metrics');
            if (data) {
                document.getElementById('phase7Throughput').textContent = `${Math.round(data.current_throughput_per_sec)}/s`;
                // Update throughput data and charts
                console.log('Throughput data:', data);
            }
        }
        
        async function updateHealthStatus() {
            const data = await fetchJson('/api/performance/health-status');
            if (data) {
                document.getElementById('phase7HealthScore').textContent = data.health_score;
                document.getElementById('phase7ActiveAlerts').textContent = data.active_alerts.length;
                
                const healthElement = document.getElementById('phase7HealthStatus');
                const statusColor = data.overall_status === 'EXCELLENT' ? '#4CAF50' : 
                                   data.overall_status === 'GOOD' ? '#2196F3' : 
                                   data.overall_status === 'WARNING' ? '#FF9800' : '#F44336';
                
                healthElement.innerHTML = `
                    <div style="background: ${statusColor}; color: white; padding: 10px; border-radius: 6px; margin-bottom: 15px;">
                        <strong>Status: ${data.overall_status}</strong>
                        <br>Score: ${data.health_score}/100
                        <br>Uptime: ${Math.floor(data.uptime_seconds / 3600)}h ${Math.floor((data.uptime_seconds % 3600) / 60)}m
                    </div>
                    <div style="font-size: 0.9rem; color: #666;">
                        Components: ${data.components.length} healthy
                    </div>
                `;
            }
        }
        
        async function updateBottleneckAnalysis() {
            const data = await fetchJson('/api/performance/bottlenecks');
            if (data) {
                const bottleneckElement = document.getElementById('phase7Bottlenecks');
                
                if (data.bottlenecks && data.bottlenecks.length > 0) {
                    let html = `<div style="margin-bottom: 15px;">Found ${data.total_bottlenecks_found} bottlenecks:</div>`;
                    
                    data.bottlenecks.forEach(bottleneck => {
                        const severityColor = bottleneck.severity === 'CRITICAL' ? '#F44336' : 
                                              bottleneck.severity === 'WARNING' ? '#FF9800' : '#2196F3';
                        
                        html += `
                            <div style="background: #f8f9fa; padding: 10px; border-radius: 6px; margin: 10px 0; border-left: 4px solid ${severityColor};">
                                <strong>${bottleneck.component}</strong> - ${bottleneck.severity}
                                <br><small>${bottleneck.description}</small>
                                <br><small>Impact: ${bottleneck.impact_score}%</small>
                            </div>
                        `;
                    });
                    
                    bottleneckElement.innerHTML = html;
                } else {
                    bottleneckElement.innerHTML = '<div style="text-align: center; color: #4CAF50; padding: 20px;">✅ No bottlenecks detected</div>';
                }
            }
        }
        
        async function updatePerformanceTrends() {
            const data = await fetchJson('/api/performance/history?range=1h');
            if (data) {
                // Update performance trend charts
                console.log('Performance trend data:', data);
            }
        }
        
        async function updateAllData() {
            // Force immediate synchronized update of all exchange-dependent data
            if (isUpdating) return; // Prevent concurrent updates
            
            isUpdating = true;
            document.getElementById('refreshIndicator').style.display = 'block';
            
            try {
                // Update market data and pricing results synchronously to ensure consistency
                await updateMarketData();
                await updatePricingResults();
                
                console.log('Exchange data synchronized for:', selectedExchange);
            } catch (error) {
                console.error('Error synchronizing exchange data:', error);
            } finally {
                isUpdating = false;
                document.getElementById('refreshIndicator').style.display = 'none';
            }
        }
        
        async function updateAll() {
            if (isUpdating) {
                console.log('Update already in progress, skipping...');
                return;
            }
            
            isUpdating = true;
            document.getElementById('refreshIndicator').style.display = 'block';
            
            try {
                // Update all components with proper error handling
                const updatePromises = [
                    updateSystemStatus().catch(e => console.error('System status update failed:', e)),
                    updateMarketData().catch(e => console.error('Market data update failed:', e)),
                    updatePricingResults().catch(e => console.error('Pricing results update failed:', e)),
                    updateOpportunities().catch(e => console.error('Opportunities update failed:', e)),
                    updatePerformance().catch(e => console.error('Performance update failed:', e)),
                    updateRiskMetrics().catch(e => console.error('Risk metrics update failed:', e)),
                    updatePhase7Data().catch(e => console.error('Phase 7 update failed:', e))
                ];
                
                await Promise.allSettled(updatePromises);
                
                document.getElementById('lastUpdate').textContent = new Date().toLocaleTimeString();
                console.log('Dashboard update completed at:', new Date().toLocaleTimeString());
            } catch (error) {
                console.error('Critical error updating dashboard:', error);
            } finally {
                isUpdating = false;
                document.getElementById('refreshIndicator').style.display = 'none';
            }
        }
        
        // Chart variables
        let priceChart, volumeChart, arbitrageChart, orderBookChart, riskHeatmapChart, pnlChart;
        let priceData = {
            BTCUSDT: [], ETHUSDT: [], ADAUSDT: [], BNBUSDT: [], SOLUSDT: []
        };
        let currentPair = 'BTCUSDT';
        let currentOrderBookPair = 'BTCUSDT';
        
        // Initialize charts
        function initializeCharts() {
            // Price chart
            const priceCtx = document.getElementById('priceChart').getContext('2d');
            priceChart = new Chart(priceCtx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Binance',
                        data: [],
                        borderColor: '#F0B90B',
                        backgroundColor: 'rgba(240, 185, 11, 0.1)',
                        tension: 0.4
                    }, {
                        label: 'OKX',
                        data: [],
                        borderColor: '#0066FF',
                        backgroundColor: 'rgba(0, 102, 255, 0.1)',
                        tension: 0.4
                    }, {
                        label: 'Bybit',
                        data: [],
                        borderColor: '#FF6B35',
                        backgroundColor: 'rgba(255, 107, 53, 0.1)',
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: false
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: currentPair + ' Price Movement'
                        }
                    }
                }
            });
            
            // Volume chart
            const volumeCtx = document.getElementById('volumeChart').getContext('2d');
            volumeChart = new Chart(volumeCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Binance', 'OKX', 'Bybit'],
                    datasets: [{
                        data: [40, 35, 25],
                        backgroundColor: ['#F0B90B', '#0066FF', '#FF6B35']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            });
            
            // Order Book Chart
            const orderBookCtx = document.getElementById('orderBookChart').getContext('2d');
            orderBookChart = new Chart(orderBookCtx, {
                type: 'bar',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Bids',
                        data: [],
                        backgroundColor: 'rgba(76, 175, 80, 0.8)',
                        borderColor: 'rgba(76, 175, 80, 1)',
                        borderWidth: 1
                    }, {
                        label: 'Asks',
                        data: [],
                        backgroundColor: 'rgba(244, 67, 54, 0.8)',
                        borderColor: 'rgba(244, 67, 54, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            stacked: false
                        },
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: currentOrderBookPair + ' Order Book Depth'
                        }
                    }
                }
            });
            
            // Risk Heatmap Chart
            const riskHeatmapCtx = document.getElementById('riskHeatmapChart').getContext('2d');
            riskHeatmapChart = new Chart(riskHeatmapCtx, {
                type: 'scatter',
                data: {
                    datasets: [{
                        label: 'Risk Factors',
                        data: [
                            {x: 20, y: 30, r: 10},
                            {x: 40, y: 50, r: 15},
                            {x: 60, y: 70, r: 8},
                            {x: 80, y: 40, r: 12}
                        ],
                        backgroundColor: 'rgba(255, 99, 132, 0.6)'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            type: 'linear',
                            position: 'bottom',
                            title: {
                                display: true,
                                text: 'Volatility %'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Correlation %'
                            }
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: 'Risk Factor Heatmap'
                        }
                    }
                }
            });
            
            // P&L Chart
            const pnlCtx = document.getElementById('pnlChart').getContext('2d');
            pnlChart = new Chart(pnlCtx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Cumulative P&L',
                        data: [],
                        borderColor: 'rgba(76, 175, 80, 1)',
                        backgroundColor: 'rgba(76, 175, 80, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: false
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: 'Portfolio P&L Over Time'
                        }
                    }
                }
            });
            
            // Arbitrage chart
            const arbCtx = document.getElementById('arbitrageChart').getContext('2d');
            arbitrageChart = new Chart(arbCtx, {
                type: 'bar',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Profit %',
                        data: [],
                        backgroundColor: 'rgba(76, 175, 80, 0.8)'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }
        
        function showChart(pair) {
            currentPair = pair;
            
            // Update tab buttons
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            // Update chart title
            priceChart.options.plugins.title.text = pair + ' Price Movement';
            priceChart.update();
        }
        
        function showOrderBook(pair) {
            currentOrderBookPair = pair;
            
            // Update tab buttons for order book
            const orderBookTabs = document.querySelectorAll('.trading-pair-tabs')[1].querySelectorAll('.tab-button');
            orderBookTabs.forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            // Update order book chart
            orderBookChart.options.plugins.title.text = pair + ' Order Book Depth';
            updateOrderBookChart();
            updateOrderBookTable();
        }
        
        function updateOrderBookChart() {
            // Simulate order book data
            const pricelevels = [];
            const bids = [];
            const asks = [];
            
            const basePrice = currentOrderBookPair === 'BTCUSDT' ? 45000 : 
                             currentOrderBookPair === 'ETHUSDT' ? 3000 : 1000;
            
            for (let i = -10; i <= 10; i++) {
                const price = basePrice + (i * (basePrice * 0.001));
                pricelevels.push(price.toFixed(2));
                
                if (i < 0) {
                    bids.push(Math.random() * 100);
                    asks.push(0);
                } else if (i > 0) {
                    bids.push(0);
                    asks.push(Math.random() * 100);
                } else {
                    bids.push(0);
                    asks.push(0);
                }
            }
            
            orderBookChart.data.labels = pricelevels;
            orderBookChart.data.datasets[0].data = bids;
            orderBookChart.data.datasets[1].data = asks;
            orderBookChart.update('none');
        }
        
        function updateOrderBookTable() {
            const orderBookElement = document.getElementById('orderBookData');
            
            let html = '<div style="display: flex; justify-content: space-between; font-weight: bold; margin-bottom: 10px;">';
            html += '<span>Price</span><span>Size</span><span>Total</span></div>';
            
            // Simulate asks (higher prices)
            const basePrice = currentOrderBookPair === 'BTCUSDT' ? 45000 : 
                             currentOrderBookPair === 'ETHUSDT' ? 3000 : 1000;
            
            for (let i = 5; i > 0; i--) {
                const price = (basePrice + (i * (basePrice * 0.0001))).toFixed(2);
                const size = (Math.random() * 10).toFixed(3);
                const total = (parseFloat(price) * parseFloat(size)).toFixed(2);
                html += `<div class="order-book-item"><span class="ask-price">${price}</span><span>${size}</span><span>$${total}</span></div>`;
            }
            
            html += '<div style="border-top: 2px solid #ccc; margin: 10px 0; padding-top: 10px;"></div>';
            
            // Simulate bids (lower prices)
            for (let i = 1; i <= 5; i++) {
                const price = (basePrice - (i * (basePrice * 0.0001))).toFixed(2);
                const size = (Math.random() * 10).toFixed(3);
                const total = (parseFloat(price) * parseFloat(size)).toFixed(2);
                html += `<div class="order-book-item"><span class="bid-price">${price}</span><span>${size}</span><span>$${total}</span></div>`;
            }
            
            orderBookElement.innerHTML = html;
        }
        
        function updateRiskMetricsDisplay() {
            // Update risk metric cards with simulated data
            document.getElementById('portfolioVar').textContent = '$' + (2000 + Math.random() * 1000).toFixed(0);
            document.getElementById('expectedShortfall').textContent = '$' + (2500 + Math.random() * 1000).toFixed(0);
            document.getElementById('concentrationRisk').textContent = (20 + Math.random() * 15).toFixed(1) + '%';
            document.getElementById('correlationRisk').textContent = (30 + Math.random() * 20).toFixed(1) + '%';
        }
        
        function updatePortfolioMetrics() {
            // Update portfolio metric cards
            const totalPnL = 10000 + (Math.random() * 5000);
            const realizedPnL = totalPnL * 0.7;
            const unrealizedPnL = totalPnL * 0.3;
            
            document.getElementById('totalPnL').textContent = '+$' + totalPnL.toFixed(0);
            document.getElementById('realizedPnL').textContent = '+$' + realizedPnL.toFixed(0);
            document.getElementById('unrealizedPnL').textContent = '+$' + unrealizedPnL.toFixed(0);
            document.getElementById('sharpeRatio').textContent = (1.5 + Math.random() * 0.5).toFixed(2);
            
            // Update P&L chart
            const now = new Date().toLocaleTimeString();
            if (pnlChart.data.labels.length > 20) {
                pnlChart.data.labels.shift();
                pnlChart.data.datasets[0].data.shift();
            }
            
            pnlChart.data.labels.push(now);
            pnlChart.data.datasets[0].data.push(totalPnL);
            pnlChart.update('none');
        }
        
        function updateConnectionStatus() {
            // Simulate connection status updates
            const exchanges = ['binance', 'okx', 'bybit'];
            
            exchanges.forEach(exchange => {
                const latency = (30 + Math.random() * 40).toFixed(0) + 'ms';
                const messages = (Math.floor(Math.random() * 1000) + 500).toString();
                
                document.getElementById(exchange + 'Latency').textContent = latency;
                document.getElementById(exchange + 'Messages').textContent = messages;
            });
        }
        
        function updateCharts() {
            // Update price chart with real data
            const now = new Date().toLocaleTimeString();
            
            // Simulate some price data for demo
            const basePrice = currentPair === 'BTCUSDT' ? 45000 : currentPair === 'ETHUSDT' ? 3000 : 1000;
            const variation = (Math.random() - 0.5) * 10;
            
            if (priceChart.data.labels.length > 20) {
                priceChart.data.labels.shift();
                priceChart.data.datasets.forEach(dataset => dataset.data.shift());
            }
            
            priceChart.data.labels.push(now);
            priceChart.data.datasets[0].data.push(basePrice + variation);      // Binance
            priceChart.data.datasets[1].data.push(basePrice + variation + 1); // OKX
            priceChart.data.datasets[2].data.push(basePrice + variation - 1); // Bybit
            priceChart.update('none');
            
            // Update other charts and metrics
            updateOrderBookChart();
            updateRiskMetricsDisplay();
            updatePortfolioMetrics();
            updateConnectionStatus();
        }
        
        function addAlert(type, message) {
            const alertContainer = document.getElementById('alertContainer');
            const alertDiv = document.createElement('div');
            alertDiv.style.cssText = 'background: rgba(255,255,255,0.9); padding: 10px; margin: 5px 0; border-radius: 6px; border-left: 4px solid #ff4444;';
            alertDiv.innerHTML = `<strong>${type}:</strong> ${message} <small>(${new Date().toLocaleTimeString()})</small>`;
            
            alertContainer.appendChild(alertDiv);
            
            // Keep only last 5 alerts
            while (alertContainer.children.length > 6) { // 6 because first child is the description
                alertContainer.removeChild(alertContainer.children[1]);
            }
        }
        
        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            initializeCharts();
            updateAll();
            updateOrderBookTable();
            
            // Auto-refresh every 3 seconds for more responsive updates
            setInterval(() => {
                updateAll();
                updateCharts();
            }, 3000);
            
            // Demo alerts with more variety
            setTimeout(() => addAlert('ARBITRAGE', 'BTC: 0.15% opportunity between Binance-OKX detected'), 8000);
            setTimeout(() => addAlert('RISK', 'Portfolio exposure above 80% threshold'), 12000);
            setTimeout(() => addAlert('ORDER_BOOK', 'Large order detected: 50 BTC at $44,950'), 16000);
            setTimeout(() => addAlert('FUNDING', 'Funding rate arbitrage: ETH +0.12% on Bybit'), 20000);
        });
    </script>
</body>
</html>